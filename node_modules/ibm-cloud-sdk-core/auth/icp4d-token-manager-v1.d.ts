/**
 * Copyright 2019 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { JwtTokenManagerV1 } from './jwt-token-manager-v1';
export declare type Options = {
    url: string;
    accessToken?: string;
    username?: string;
    password?: string;
    disableSslVerification?: boolean;
    requestWrapper?: any;
};
export interface IcpTokenData {
    username: string;
    role: string;
    permissions: string[];
    sub: string;
    iss: string;
    aud: string;
    uid: string;
    _messageCode_: string;
    message: string;
    accessToken: string;
}
export declare class Icp4dTokenManagerV1 extends JwtTokenManagerV1 {
    private username;
    private password;
    /**
     * ICP Token Manager Service
     *
     * Retreives and stores ICP access tokens.
     *
     * @param {Object} options
     * @param {String} options.username
     * @param {String} options.password
     * @param {String} options.accessToken - user-managed access token
     * @param {String} options.url - URL for the ICP4D cluster
     * @param {Boolean} options.disableSslVerification - disable SSL verification for token request
     * @constructor
     */
    constructor(options: Options);
    /**
     * Callback for handling response.
     *
     * @callback requestTokenCallback
     * @param {Error} An error if there is one, null otherwise
     * @param {Object} The response if request is successful, null otherwise
     */
    /**
     * Request an ICP token using a basic auth header.
     *
     * @param {requestTokenCallback} callback - The callback that handles the response.
     * @returns {void}
     */
    protected requestToken(callback: Function): void;
}
