/**
 * Copyright 2019 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { JwtTokenManagerV1 } from './jwt-token-manager-v1';
export declare type Options = {
    url?: string;
    iamUrl?: string;
    iamApikey?: string;
    accessToken?: string;
    iamAccessToken?: string;
    iamClientId?: string;
    iamClientSecret?: string;
    requestWrapper?: any;
};
export interface IamTokenData {
    access_token: string;
    refresh_token: string;
    token_type: string;
    expires_in: number;
    expiration: number;
}
export declare class IamTokenManagerV1 extends JwtTokenManagerV1 {
    private iamApikey;
    private iamClientId;
    private iamClientSecret;
    /**
     * IAM Token Manager Service
     *
     * Retreives and stores IAM access tokens.
     *
     * @param {Object} options
     * @param {String} options.iamApikey
     * @param {String} options.iamAccessToken
     * @param {String} options.iamUrl - url of the iam api to retrieve tokens from
     * @constructor
     */
    constructor(options: Options);
    /**
     * Set the IAM 'client_id' and 'client_secret' values.
     * These values are used to compute the Authorization header used
     * when retrieving the IAM access token.
     * If these values are not set, then a default Authorization header
     * will be used when interacting with the IAM token server.
     *
     * @param {string} iamClientId - The client id
     * @param {string} iamClientSecret - The client secret
     * @returns {void}
     */
    setIamAuthorizationInfo(iamClientId: string, iamClientSecret: string): void;
    /**
     * Callback for handling response.
     *
     * @callback requestTokenCallback
     * @param {Error} An error if there is one, null otherwise
     * @param {Object} The response if request is successful, null otherwise
     */
    /**
     * Request an IAM token using an API key.
     *
     * @param {requestTokenCallback} callback - The callback that handles the response.
     * @returns {void}
     */
    protected requestToken(callback: Function): void;
}
