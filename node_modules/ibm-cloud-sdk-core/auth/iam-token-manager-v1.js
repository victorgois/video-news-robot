"use strict";
/**
 * Copyright 2019 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var jwt_token_manager_v1_1 = require("./jwt-token-manager-v1");
var utils_1 = require("./utils");
/**
 * Check for only one of two elements being defined.
 * Returns true if a is defined and b is undefined,
 * or vice versa. Returns false if both are defined
 * or both are undefined.
 *
 * @param {any} a - The first object
 * @param {any} b - The second object
 * @returns {boolean}
 */
function onlyOne(a, b) {
    return Boolean((a && !b) || (b && !a));
}
var CLIENT_ID_SECRET_WARNING = 'Warning: Client ID and Secret must BOTH be given, or the defaults will be used.';
var IamTokenManagerV1 = /** @class */ (function (_super) {
    __extends(IamTokenManagerV1, _super);
    /**
     * IAM Token Manager Service
     *
     * Retreives and stores IAM access tokens.
     *
     * @param {Object} options
     * @param {String} options.iamApikey
     * @param {String} options.iamAccessToken
     * @param {String} options.iamUrl - url of the iam api to retrieve tokens from
     * @constructor
     */
    function IamTokenManagerV1(options) {
        var _this = _super.call(this, options) || this;
        _this.url = _this.url || options.iamUrl || 'https://iam.cloud.ibm.com/identity/token';
        if (options.iamApikey) {
            _this.iamApikey = options.iamApikey;
        }
        if (options.iamAccessToken) {
            _this.userAccessToken = options.iamAccessToken;
        }
        if (options.iamClientId) {
            _this.iamClientId = options.iamClientId;
        }
        if (options.iamClientSecret) {
            _this.iamClientSecret = options.iamClientSecret;
        }
        if (onlyOne(options.iamClientId, options.iamClientSecret)) {
            // tslint:disable-next-line
            console.log(CLIENT_ID_SECRET_WARNING);
        }
        return _this;
    }
    /**
     * Set the IAM 'client_id' and 'client_secret' values.
     * These values are used to compute the Authorization header used
     * when retrieving the IAM access token.
     * If these values are not set, then a default Authorization header
     * will be used when interacting with the IAM token server.
     *
     * @param {string} iamClientId - The client id
     * @param {string} iamClientSecret - The client secret
     * @returns {void}
     */
    IamTokenManagerV1.prototype.setIamAuthorizationInfo = function (iamClientId, iamClientSecret) {
        this.iamClientId = iamClientId;
        this.iamClientSecret = iamClientSecret;
        if (onlyOne(iamClientId, iamClientSecret)) {
            // tslint:disable-next-line
            console.log(CLIENT_ID_SECRET_WARNING);
        }
    };
    /**
     * Callback for handling response.
     *
     * @callback requestTokenCallback
     * @param {Error} An error if there is one, null otherwise
     * @param {Object} The response if request is successful, null otherwise
     */
    /**
     * Request an IAM token using an API key.
     *
     * @param {requestTokenCallback} callback - The callback that handles the response.
     * @returns {void}
     */
    IamTokenManagerV1.prototype.requestToken = function (callback) {
        // Use bx:bx as default auth header creds.
        var clientId = 'bx';
        var clientSecret = 'bx';
        // If both the clientId and secret were specified by the user, then use them.
        if (this.iamClientId && this.iamClientSecret) {
            clientId = this.iamClientId;
            clientSecret = this.iamClientSecret;
        }
        var parameters = {
            options: {
                url: this.url,
                method: 'POST',
                headers: {
                    'Content-type': 'application/x-www-form-urlencoded',
                    Authorization: utils_1.computeBasicAuthHeader(clientId, clientSecret),
                },
                form: {
                    grant_type: 'urn:ibm:params:oauth:grant-type:apikey',
                    apikey: this.iamApikey,
                    response_type: 'cloud_iam'
                },
            }
        };
        this.requestWrapperInstance.sendRequest(parameters, callback);
    };
    return IamTokenManagerV1;
}(jwt_token_manager_v1_1.JwtTokenManagerV1));
exports.IamTokenManagerV1 = IamTokenManagerV1;
//# sourceMappingURL=iam-token-manager-v1.js.map