"use strict";
/**
 * Copyright 2019 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var jwt_token_manager_v1_1 = require("./jwt-token-manager-v1");
var utils_1 = require("./utils");
var Icp4dTokenManagerV1 = /** @class */ (function (_super) {
    __extends(Icp4dTokenManagerV1, _super);
    /**
     * ICP Token Manager Service
     *
     * Retreives and stores ICP access tokens.
     *
     * @param {Object} options
     * @param {String} options.username
     * @param {String} options.password
     * @param {String} options.accessToken - user-managed access token
     * @param {String} options.url - URL for the ICP4D cluster
     * @param {Boolean} options.disableSslVerification - disable SSL verification for token request
     * @constructor
     */
    function Icp4dTokenManagerV1(options) {
        var _this = _super.call(this, options) || this;
        _this.tokenName = 'accessToken';
        if (_this.url) {
            _this.url = _this.url + '/v1/preauth/validateAuth';
        }
        else if (!_this.userAccessToken) {
            // url is not needed if the user specifies their own access token
            throw new Error('`url` is a required parameter for Icp4dTokenManagerV1');
        }
        if (options.username) {
            _this.username = options.username;
        }
        if (options.password) {
            _this.password = options.password;
        }
        // username and password are required too, unless there's access token
        _this.rejectUnauthorized = !options.disableSslVerification;
        return _this;
    }
    /**
     * Callback for handling response.
     *
     * @callback requestTokenCallback
     * @param {Error} An error if there is one, null otherwise
     * @param {Object} The response if request is successful, null otherwise
     */
    /**
     * Request an ICP token using a basic auth header.
     *
     * @param {requestTokenCallback} callback - The callback that handles the response.
     * @returns {void}
     */
    Icp4dTokenManagerV1.prototype.requestToken = function (callback) {
        var parameters = {
            options: {
                url: this.url,
                method: 'GET',
                headers: {
                    Authorization: utils_1.computeBasicAuthHeader(this.username, this.password),
                },
                rejectUnauthorized: this.rejectUnauthorized,
            }
        };
        this.requestWrapperInstance.sendRequest(parameters, callback);
    };
    return Icp4dTokenManagerV1;
}(jwt_token_manager_v1_1.JwtTokenManagerV1));
exports.Icp4dTokenManagerV1 = Icp4dTokenManagerV1;
//# sourceMappingURL=icp4d-token-manager-v1.js.map