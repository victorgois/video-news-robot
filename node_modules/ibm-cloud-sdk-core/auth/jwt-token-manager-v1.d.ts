/**
 * Copyright 2019 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export declare type Options = {
    accessToken?: string;
    url?: string;
    requestWrapper?: any;
};
export declare class JwtTokenManagerV1 {
    protected url: string;
    protected tokenName: string;
    protected userAccessToken: string;
    protected rejectUnauthorized: boolean;
    protected requestWrapperInstance: any;
    private tokenInfo;
    private expireTime;
    /**
     * Token Manager Service
     *
     * Retreives and stores JSON web tokens.
     *
     * @param {Object} options
     * @param {String} options.url - url of the api to retrieve tokens from
     * @param {String} [options.accessToken] - user-managed access token
     * @constructor
     */
    constructor(options: Options);
    /**
     * This function sends an access token back through a callback. The source of the token
     * is determined by the following logic:
     * 1. If user provides their own managed access token, assume it is valid and send it
     * 2. a) If this class is managing tokens and does not yet have one, make a request for one
     *    b) If this class is managing tokens and the token has expired, request a new one
     * 3. If this class is managing tokens and has a valid token stored, send it
     *
     * @param {Function} cb - callback function that the token will be passed to
     */
    getToken(cb: Function): any;
    /**
     * Set a self-managed access token.
     * The access token should be valid and not yet expired.
     *
     * By using this method, you accept responsibility for managing the
     * access token yourself. You must set a new access token before this
     * one expires. Failing to do so will result in authentication errors
     * after this token expires.
     *
     * @param {string} accessToken - A valid, non-expired access token
     * @returns {void}
     */
    setAccessToken(accessToken: string): void;
    /**
     * Request a JWT using an API key.
     *
     * @param {Function} cb - The callback that handles the response.
     * @returns {void}
     */
    protected requestToken(cb: Function): void;
    /**
     * Check if currently stored token is "expired"
     * i.e. past the window to request a new token
     *
     * @private
     * @returns {boolean}
     */
    private isTokenExpired;
    /**
     * Save the JWT service response and the calculated expiration time to the object's state.
     *
     * @param tokenResponse - Response object from JWT service request
     * @private
     * @returns {void}
     */
    private saveTokenInfo;
    /**
     * Decode the access token and calculate the time to request a new token.
     *
     * A time buffer prevents the edge case of the token expiring before the request could be made.
     * The buffer will be a fraction of the total time to live - we are using 80%
     *
     * @param accessToken - JSON Web Token received from the service
     * @private
     * @returns {void}
     */
    private calculateTimeForNewToken;
}
